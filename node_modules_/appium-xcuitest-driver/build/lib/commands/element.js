"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _logger = _interopRequireDefault(require("../logger"));

const commands = {},
      extensions = {};
exports.commands = commands;

commands.elementDisplayed = async function elementDisplayed(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('is_displayed', [atomsElement]);
  }

  return await this.proxyCommand(`/element/${el}/displayed`, 'GET');
};

commands.elementEnabled = async function elementEnabled(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('is_enabled', [atomsElement]);
  }

  return await this.proxyCommand(`/element/${el}/enabled`, 'GET');
};

commands.elementSelected = async function elementSelected(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.useAtomsElement(el);
    return await this.executeAtom('is_selected', [atomsElement]);
  }

  return await this.proxyCommand(`/element/${el}/selected`, 'GET');
};

commands.getName = async function getName(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.useAtomsElement(el);
    const script = 'return arguments[0].tagName.toLowerCase()';
    return await this.executeAtom('execute_script', [script, [atomsElement]]);
  }

  return await this.proxyCommand(`/element/${el}/name`, 'GET');
};

commands.getNativeAttribute = async function getNativeAttribute(attribute, el) {
  if (attribute === 'contentSize') {
    return await this.getContentSize(el);
  }

  el = _appiumSupport.util.unwrapElement(el);
  let value = await this.proxyCommand(`/element/${el}/attribute/${attribute}`, 'GET');

  if ([0, 1].includes(value)) {
    value = !!value;
  }

  return _lodash.default.isNull(value) || _lodash.default.isString(value) ? value : JSON.stringify(value);
};

commands.getAttribute = async function getAttribute(attribute, el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    return await this.getNativeAttribute(attribute, el);
  }

  const atomsElement = this.getAtomsElement(el);

  if (_lodash.default.isNull(atomsElement)) {
    throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}`);
  }

  return await this.executeAtom('get_attribute_value', [atomsElement, attribute]);
};

commands.getProperty = async function getProperty(property, el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    return await this.getNativeAttribute(property, el);
  }

  const atomsElement = this.getAtomsElement(el);

  if (_lodash.default.isNull(atomsElement)) {
    throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}`);
  }

  return await this.executeAtom('get_attribute_value', [atomsElement, property]);
};

commands.getText = async function getText(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    return await this.proxyCommand(`/element/${el}/text`, 'GET');
  }

  let atomsElement = this.useAtomsElement(el);
  return await this.executeAtom('get_text', [atomsElement]);
};

commands.getElementRect = async function getElementRect(el) {
  if (this.isWebContext()) {
    const {
      x,
      y
    } = await this.getLocation(el);
    const {
      width,
      height
    } = await this.getSize(el);
    return {
      x,
      y,
      width,
      height
    };
  }

  el = _appiumSupport.util.unwrapElement(el);
  return await this.getNativeRect(el);
};

extensions.getNativeRect = async function getNativeRect(el) {
  return await this.proxyCommand(`/element/${el}/rect`, 'GET');
};

commands.getLocation = async function getLocation(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = await this.useAtomsElement(el);
    let loc = await this.executeAtom('get_top_left_coordinates', [atomsElement]);

    if (this.opts.absoluteWebLocations) {
      const script = 'return [document.body.scrollLeft, document.body.scrollTop];';
      const [xOffset, yOffset] = await this.execute(script);
      loc.x += xOffset;
      loc.y += yOffset;
    }

    return loc;
  }

  const rect = await this.getElementRect(el);
  return {
    x: rect.x,
    y: rect.y
  };
};

commands.getLocationInView = async function getLocationInView(el) {
  return await this.getLocation(el);
};

commands.getSize = async function getSize(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    let atomsElement = this.getAtomsElement(el);

    if (atomsElement === null) {
      throw new _appiumBaseDriver.errors.UnknownError(`Error converting element ID for using in WD atoms: '${el}'`);
    }

    return await this.executeAtom('get_size', [atomsElement]);
  }

  const rect = await this.getElementRect(el);
  return {
    width: rect.width,
    height: rect.height
  };
};

function prepareInputValue(inp) {
  if (![_lodash.default.isArray, _lodash.default.isString, _lodash.default.isFinite].some(f => f(inp))) {
    throw new Error(`Only strings, numbers and arrays are supported as input arguments. ` + `Received: ${JSON.stringify(inp)}`);
  }

  if (_lodash.default.isArray(inp)) {
    inp = inp.join('');
  } else if (_lodash.default.isFinite(inp)) {
    inp = `${inp}`;
  }

  return [...inp].map(k => {
    if (['\uE006', '\uE007'].includes(k)) {
      return '\n';
    }

    if (['\uE003', '\ue017'].includes(k)) {
      return '\b';
    }

    return k;
  });
}

commands.setValueImmediate = async function setValueImmediate(value, el) {
  _logger.default.info('There is currently no way to bypass typing using XCUITest. Setting value through keyboard');

  await this.setValue(value, el);
};

commands.setValue = async function setValue(value, el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (!this.isWebContext()) {
    await this.proxyCommand(`/element/${el}/value`, 'POST', {
      value: prepareInputValue(value)
    });
    return;
  }

  const atomsElement = this.useAtomsElement(el);
  await this.executeAtom('click', [atomsElement]);
  await this.executeAtom('type', [atomsElement, value]);
};

commands.keys = async function keys(value) {
  await this.proxyCommand('/wda/keys', 'POST', {
    value: prepareInputValue(value)
  });
};

commands.clear = async function clear(el) {
  el = _appiumSupport.util.unwrapElement(el);

  if (this.isWebContext()) {
    const atomsElement = this.useAtomsElement(el);
    await this.executeAtom('clear', [atomsElement]);
    return;
  }

  await this.proxyCommand(`/element/${el}/clear`, 'POST');
};

commands.getContentSize = async function getContentSize(el) {
  if (this.isWebContext()) {
    throw new _appiumBaseDriver.errors.NotYetImplementedError('Support for getContentSize for web context is not yet implemented. Please contact an Appium dev');
  }

  const type = await this.getAttribute('type', el);

  if (type !== 'XCUIElementTypeTable' && type !== 'XCUIElementTypeCollectionView') {
    throw new Error(`Can't get content size for type '${type}', only for ` + `tables and collection views`);
  }

  let locator = '*';

  if (type === 'XCUIElementTypeTable') {
    locator = 'XCUIElementTypeCell';
  }

  let contentHeight = 0;
  const children = await this.findElOrEls(`class chain`, locator, true, el);

  if (children.length === 1) {
    const rect = await this.getElementRect(_lodash.default.head(children));
    contentHeight = rect.height;
  } else if (children.length) {
    switch (type) {
      case 'XCUIElementTypeTable':
        {
          const firstRect = await this.getElementRect(_lodash.default.head(children));
          const lastRect = await this.getElementRect(_lodash.default.last(children));
          contentHeight = lastRect.y + lastRect.height - firstRect.y;
          break;
        }

      case 'XCUIElementTypeCollectionView':
        {
          let elsInRow = 1;
          let firstRect = await this.getElementRect(_lodash.default.head(children));
          let initialRects = [firstRect];

          for (let i = 1; i < children.length; i++) {
            const rect = await this.getElementRect(children[i]);
            initialRects.push(rect);

            if (rect.y !== firstRect.y) {
              elsInRow = i;
              break;
            }
          }

          const spaceBetweenEls = initialRects[elsInRow].y - initialRects[elsInRow - 1].y - initialRects[elsInRow - 1].height;
          const numRows = Math.ceil(children.length / elsInRow);
          contentHeight = numRows * firstRect.height + spaceBetweenEls * (numRows - 1);
          break;
        }

      default:
        throw new Error(`Programming error: type '${type}' was not ` + `valid but should have already been rejected`);
    }
  }

  const size = await this.getSize(el);
  const origin = await this.getLocationInView(el);
  return JSON.stringify({
    width: size.width,
    height: size.height,
    top: origin.y,
    left: origin.x,
    scrollableOffset: contentHeight
  });
};

commands.isKeyboardShown = async function isKeyboardShown() {
  try {
    await this.findNativeElementOrElements('class name', 'XCUIElementTypeKeyboard', false);
    return true;
  } catch (ign) {
    return false;
  }
};

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9lbGVtZW50LmpzIl0sIm5hbWVzIjpbImNvbW1hbmRzIiwiZXh0ZW5zaW9ucyIsImVsZW1lbnREaXNwbGF5ZWQiLCJlbCIsInV0aWwiLCJ1bndyYXBFbGVtZW50IiwiaXNXZWJDb250ZXh0IiwiYXRvbXNFbGVtZW50IiwidXNlQXRvbXNFbGVtZW50IiwiZXhlY3V0ZUF0b20iLCJwcm94eUNvbW1hbmQiLCJlbGVtZW50RW5hYmxlZCIsImVsZW1lbnRTZWxlY3RlZCIsImdldE5hbWUiLCJzY3JpcHQiLCJnZXROYXRpdmVBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJnZXRDb250ZW50U2l6ZSIsInZhbHVlIiwiaW5jbHVkZXMiLCJfIiwiaXNOdWxsIiwiaXNTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0QXR0cmlidXRlIiwiZ2V0QXRvbXNFbGVtZW50IiwiZXJyb3JzIiwiVW5rbm93bkVycm9yIiwiZ2V0UHJvcGVydHkiLCJwcm9wZXJ0eSIsImdldFRleHQiLCJnZXRFbGVtZW50UmVjdCIsIngiLCJ5IiwiZ2V0TG9jYXRpb24iLCJ3aWR0aCIsImhlaWdodCIsImdldFNpemUiLCJnZXROYXRpdmVSZWN0IiwibG9jIiwib3B0cyIsImFic29sdXRlV2ViTG9jYXRpb25zIiwieE9mZnNldCIsInlPZmZzZXQiLCJleGVjdXRlIiwicmVjdCIsImdldExvY2F0aW9uSW5WaWV3IiwicHJlcGFyZUlucHV0VmFsdWUiLCJpbnAiLCJpc0FycmF5IiwiaXNGaW5pdGUiLCJzb21lIiwiZiIsIkVycm9yIiwiam9pbiIsIm1hcCIsImsiLCJzZXRWYWx1ZUltbWVkaWF0ZSIsImxvZyIsImluZm8iLCJzZXRWYWx1ZSIsImtleXMiLCJjbGVhciIsIk5vdFlldEltcGxlbWVudGVkRXJyb3IiLCJ0eXBlIiwibG9jYXRvciIsImNvbnRlbnRIZWlnaHQiLCJjaGlsZHJlbiIsImZpbmRFbE9yRWxzIiwibGVuZ3RoIiwiaGVhZCIsImZpcnN0UmVjdCIsImxhc3RSZWN0IiwibGFzdCIsImVsc0luUm93IiwiaW5pdGlhbFJlY3RzIiwiaSIsInB1c2giLCJzcGFjZUJldHdlZW5FbHMiLCJudW1Sb3dzIiwiTWF0aCIsImNlaWwiLCJzaXplIiwib3JpZ2luIiwidG9wIiwibGVmdCIsInNjcm9sbGFibGVPZmZzZXQiLCJpc0tleWJvYXJkU2hvd24iLCJmaW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMiLCJpZ24iLCJPYmplY3QiLCJhc3NpZ24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsUUFBUSxHQUFHLEVBQWpCO0FBQUEsTUFBcUJDLFVBQVUsR0FBRyxFQUFsQzs7O0FBRUFELFFBQVEsQ0FBQ0UsZ0JBQVQsR0FBNEIsZUFBZUEsZ0JBQWYsQ0FBaUNDLEVBQWpDLEVBQXFDO0FBQy9EQSxFQUFBQSxFQUFFLEdBQUdDLG9CQUFLQyxhQUFMLENBQW1CRixFQUFuQixDQUFMOztBQUNBLE1BQUksS0FBS0csWUFBTCxFQUFKLEVBQXlCO0FBQ3ZCLFVBQU1DLFlBQVksR0FBRyxLQUFLQyxlQUFMLENBQXFCTCxFQUFyQixDQUFyQjtBQUNBLFdBQU8sTUFBTSxLQUFLTSxXQUFMLENBQWlCLGNBQWpCLEVBQWlDLENBQUNGLFlBQUQsQ0FBakMsQ0FBYjtBQUNEOztBQUVELFNBQU8sTUFBTSxLQUFLRyxZQUFMLENBQW1CLFlBQVdQLEVBQUcsWUFBakMsRUFBOEMsS0FBOUMsQ0FBYjtBQUNELENBUkQ7O0FBVUFILFFBQVEsQ0FBQ1csY0FBVCxHQUEwQixlQUFlQSxjQUFmLENBQStCUixFQUEvQixFQUFtQztBQUMzREEsRUFBQUEsRUFBRSxHQUFHQyxvQkFBS0MsYUFBTCxDQUFtQkYsRUFBbkIsQ0FBTDs7QUFDQSxNQUFJLEtBQUtHLFlBQUwsRUFBSixFQUF5QjtBQUN2QixVQUFNQyxZQUFZLEdBQUcsS0FBS0MsZUFBTCxDQUFxQkwsRUFBckIsQ0FBckI7QUFDQSxXQUFPLE1BQU0sS0FBS00sV0FBTCxDQUFpQixZQUFqQixFQUErQixDQUFDRixZQUFELENBQS9CLENBQWI7QUFDRDs7QUFFRCxTQUFPLE1BQU0sS0FBS0csWUFBTCxDQUFtQixZQUFXUCxFQUFHLFVBQWpDLEVBQTRDLEtBQTVDLENBQWI7QUFDRCxDQVJEOztBQVVBSCxRQUFRLENBQUNZLGVBQVQsR0FBMkIsZUFBZUEsZUFBZixDQUFnQ1QsRUFBaEMsRUFBb0M7QUFDN0RBLEVBQUFBLEVBQUUsR0FBR0Msb0JBQUtDLGFBQUwsQ0FBbUJGLEVBQW5CLENBQUw7O0FBQ0EsTUFBSSxLQUFLRyxZQUFMLEVBQUosRUFBeUI7QUFDdkIsVUFBTUMsWUFBWSxHQUFHLEtBQUtDLGVBQUwsQ0FBcUJMLEVBQXJCLENBQXJCO0FBQ0EsV0FBTyxNQUFNLEtBQUtNLFdBQUwsQ0FBaUIsYUFBakIsRUFBZ0MsQ0FBQ0YsWUFBRCxDQUFoQyxDQUFiO0FBQ0Q7O0FBRUQsU0FBTyxNQUFNLEtBQUtHLFlBQUwsQ0FBbUIsWUFBV1AsRUFBRyxXQUFqQyxFQUE2QyxLQUE3QyxDQUFiO0FBQ0QsQ0FSRDs7QUFVQUgsUUFBUSxDQUFDYSxPQUFULEdBQW1CLGVBQWVBLE9BQWYsQ0FBd0JWLEVBQXhCLEVBQTRCO0FBQzdDQSxFQUFBQSxFQUFFLEdBQUdDLG9CQUFLQyxhQUFMLENBQW1CRixFQUFuQixDQUFMOztBQUNBLE1BQUksS0FBS0csWUFBTCxFQUFKLEVBQXlCO0FBQ3ZCLFVBQU1DLFlBQVksR0FBRyxLQUFLQyxlQUFMLENBQXFCTCxFQUFyQixDQUFyQjtBQUNBLFVBQU1XLE1BQU0sR0FBRywyQ0FBZjtBQUNBLFdBQU8sTUFBTSxLQUFLTCxXQUFMLENBQWlCLGdCQUFqQixFQUFtQyxDQUFDSyxNQUFELEVBQVMsQ0FBQ1AsWUFBRCxDQUFULENBQW5DLENBQWI7QUFDRDs7QUFFRCxTQUFPLE1BQU0sS0FBS0csWUFBTCxDQUFtQixZQUFXUCxFQUFHLE9BQWpDLEVBQXlDLEtBQXpDLENBQWI7QUFDRCxDQVREOztBQVdBSCxRQUFRLENBQUNlLGtCQUFULEdBQThCLGVBQWVBLGtCQUFmLENBQW1DQyxTQUFuQyxFQUE4Q2IsRUFBOUMsRUFBa0Q7QUFDOUUsTUFBSWEsU0FBUyxLQUFLLGFBQWxCLEVBQWlDO0FBRS9CLFdBQU8sTUFBTSxLQUFLQyxjQUFMLENBQW9CZCxFQUFwQixDQUFiO0FBQ0Q7O0FBRURBLEVBQUFBLEVBQUUsR0FBR0Msb0JBQUtDLGFBQUwsQ0FBbUJGLEVBQW5CLENBQUw7QUFHQSxNQUFJZSxLQUFLLEdBQUcsTUFBTSxLQUFLUixZQUFMLENBQW1CLFlBQVdQLEVBQUcsY0FBYWEsU0FBVSxFQUF4RCxFQUEyRCxLQUEzRCxDQUFsQjs7QUFFQSxNQUFJLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBT0csUUFBUCxDQUFnQkQsS0FBaEIsQ0FBSixFQUE0QjtBQUMxQkEsSUFBQUEsS0FBSyxHQUFHLENBQUMsQ0FBQ0EsS0FBVjtBQUNEOztBQUVELFNBQVFFLGdCQUFFQyxNQUFGLENBQVNILEtBQVQsS0FBbUJFLGdCQUFFRSxRQUFGLENBQVdKLEtBQVgsQ0FBcEIsR0FBeUNBLEtBQXpDLEdBQWlESyxJQUFJLENBQUNDLFNBQUwsQ0FBZU4sS0FBZixDQUF4RDtBQUNELENBaEJEOztBQWtCQWxCLFFBQVEsQ0FBQ3lCLFlBQVQsR0FBd0IsZUFBZUEsWUFBZixDQUE2QlQsU0FBN0IsRUFBd0NiLEVBQXhDLEVBQTRDO0FBQ2xFQSxFQUFBQSxFQUFFLEdBQUdDLG9CQUFLQyxhQUFMLENBQW1CRixFQUFuQixDQUFMOztBQUNBLE1BQUksQ0FBQyxLQUFLRyxZQUFMLEVBQUwsRUFBMEI7QUFDeEIsV0FBTyxNQUFNLEtBQUtTLGtCQUFMLENBQXdCQyxTQUF4QixFQUFtQ2IsRUFBbkMsQ0FBYjtBQUNEOztBQUNELFFBQU1JLFlBQVksR0FBRyxLQUFLbUIsZUFBTCxDQUFxQnZCLEVBQXJCLENBQXJCOztBQUNBLE1BQUlpQixnQkFBRUMsTUFBRixDQUFTZCxZQUFULENBQUosRUFBNEI7QUFDMUIsVUFBTSxJQUFJb0IseUJBQU9DLFlBQVgsQ0FBeUIsdURBQXNEekIsRUFBRyxFQUFsRixDQUFOO0FBQ0Q7O0FBQ0QsU0FBTyxNQUFNLEtBQUtNLFdBQUwsQ0FBaUIscUJBQWpCLEVBQXdDLENBQUNGLFlBQUQsRUFBZVMsU0FBZixDQUF4QyxDQUFiO0FBQ0QsQ0FWRDs7QUFZQWhCLFFBQVEsQ0FBQzZCLFdBQVQsR0FBdUIsZUFBZUEsV0FBZixDQUE0QkMsUUFBNUIsRUFBc0MzQixFQUF0QyxFQUEwQztBQUMvREEsRUFBQUEsRUFBRSxHQUFHQyxvQkFBS0MsYUFBTCxDQUFtQkYsRUFBbkIsQ0FBTDs7QUFDQSxNQUFJLENBQUMsS0FBS0csWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFdBQU8sTUFBTSxLQUFLUyxrQkFBTCxDQUF3QmUsUUFBeEIsRUFBa0MzQixFQUFsQyxDQUFiO0FBQ0Q7O0FBQ0QsUUFBTUksWUFBWSxHQUFHLEtBQUttQixlQUFMLENBQXFCdkIsRUFBckIsQ0FBckI7O0FBQ0EsTUFBSWlCLGdCQUFFQyxNQUFGLENBQVNkLFlBQVQsQ0FBSixFQUE0QjtBQUMxQixVQUFNLElBQUlvQix5QkFBT0MsWUFBWCxDQUF5Qix1REFBc0R6QixFQUFHLEVBQWxGLENBQU47QUFDRDs7QUFDRCxTQUFPLE1BQU0sS0FBS00sV0FBTCxDQUFpQixxQkFBakIsRUFBd0MsQ0FBQ0YsWUFBRCxFQUFldUIsUUFBZixDQUF4QyxDQUFiO0FBQ0QsQ0FWRDs7QUFZQTlCLFFBQVEsQ0FBQytCLE9BQVQsR0FBbUIsZUFBZUEsT0FBZixDQUF3QjVCLEVBQXhCLEVBQTRCO0FBQzdDQSxFQUFBQSxFQUFFLEdBQUdDLG9CQUFLQyxhQUFMLENBQW1CRixFQUFuQixDQUFMOztBQUNBLE1BQUksQ0FBQyxLQUFLRyxZQUFMLEVBQUwsRUFBMEI7QUFDeEIsV0FBTyxNQUFNLEtBQUtJLFlBQUwsQ0FBbUIsWUFBV1AsRUFBRyxPQUFqQyxFQUF5QyxLQUF6QyxDQUFiO0FBQ0Q7O0FBQ0QsTUFBSUksWUFBWSxHQUFHLEtBQUtDLGVBQUwsQ0FBcUJMLEVBQXJCLENBQW5CO0FBQ0EsU0FBTyxNQUFNLEtBQUtNLFdBQUwsQ0FBaUIsVUFBakIsRUFBNkIsQ0FBQ0YsWUFBRCxDQUE3QixDQUFiO0FBQ0QsQ0FQRDs7QUFTQVAsUUFBUSxDQUFDZ0MsY0FBVCxHQUEwQixlQUFlQSxjQUFmLENBQStCN0IsRUFBL0IsRUFBbUM7QUFDM0QsTUFBSSxLQUFLRyxZQUFMLEVBQUosRUFBeUI7QUFFdkIsVUFBTTtBQUFDMkIsTUFBQUEsQ0FBRDtBQUFJQyxNQUFBQTtBQUFKLFFBQVMsTUFBTSxLQUFLQyxXQUFMLENBQWlCaEMsRUFBakIsQ0FBckI7QUFDQSxVQUFNO0FBQUNpQyxNQUFBQSxLQUFEO0FBQVFDLE1BQUFBO0FBQVIsUUFBa0IsTUFBTSxLQUFLQyxPQUFMLENBQWFuQyxFQUFiLENBQTlCO0FBQ0EsV0FBTztBQUFDOEIsTUFBQUEsQ0FBRDtBQUFJQyxNQUFBQSxDQUFKO0FBQU9FLE1BQUFBLEtBQVA7QUFBY0MsTUFBQUE7QUFBZCxLQUFQO0FBQ0Q7O0FBRURsQyxFQUFBQSxFQUFFLEdBQUdDLG9CQUFLQyxhQUFMLENBQW1CRixFQUFuQixDQUFMO0FBQ0EsU0FBTyxNQUFNLEtBQUtvQyxhQUFMLENBQW1CcEMsRUFBbkIsQ0FBYjtBQUNELENBVkQ7O0FBWUFGLFVBQVUsQ0FBQ3NDLGFBQVgsR0FBMkIsZUFBZUEsYUFBZixDQUE4QnBDLEVBQTlCLEVBQWtDO0FBQzNELFNBQU8sTUFBTSxLQUFLTyxZQUFMLENBQW1CLFlBQVdQLEVBQUcsT0FBakMsRUFBeUMsS0FBekMsQ0FBYjtBQUNELENBRkQ7O0FBSUFILFFBQVEsQ0FBQ21DLFdBQVQsR0FBdUIsZUFBZUEsV0FBZixDQUE0QmhDLEVBQTVCLEVBQWdDO0FBQ3JEQSxFQUFBQSxFQUFFLEdBQUdDLG9CQUFLQyxhQUFMLENBQW1CRixFQUFuQixDQUFMOztBQUNBLE1BQUksS0FBS0csWUFBTCxFQUFKLEVBQXlCO0FBQ3ZCLFVBQU1DLFlBQVksR0FBRyxNQUFNLEtBQUtDLGVBQUwsQ0FBcUJMLEVBQXJCLENBQTNCO0FBQ0EsUUFBSXFDLEdBQUcsR0FBRyxNQUFNLEtBQUsvQixXQUFMLENBQWlCLDBCQUFqQixFQUE2QyxDQUFDRixZQUFELENBQTdDLENBQWhCOztBQUNBLFFBQUksS0FBS2tDLElBQUwsQ0FBVUMsb0JBQWQsRUFBb0M7QUFDbEMsWUFBTTVCLE1BQU0sR0FBRyw2REFBZjtBQUNBLFlBQU0sQ0FBQzZCLE9BQUQsRUFBVUMsT0FBVixJQUFxQixNQUFNLEtBQUtDLE9BQUwsQ0FBYS9CLE1BQWIsQ0FBakM7QUFDQTBCLE1BQUFBLEdBQUcsQ0FBQ1AsQ0FBSixJQUFTVSxPQUFUO0FBQ0FILE1BQUFBLEdBQUcsQ0FBQ04sQ0FBSixJQUFTVSxPQUFUO0FBQ0Q7O0FBQ0QsV0FBT0osR0FBUDtBQUNEOztBQUVELFFBQU1NLElBQUksR0FBRyxNQUFNLEtBQUtkLGNBQUwsQ0FBb0I3QixFQUFwQixDQUFuQjtBQUNBLFNBQU87QUFBQzhCLElBQUFBLENBQUMsRUFBRWEsSUFBSSxDQUFDYixDQUFUO0FBQVlDLElBQUFBLENBQUMsRUFBRVksSUFBSSxDQUFDWjtBQUFwQixHQUFQO0FBQ0QsQ0FoQkQ7O0FBa0JBbEMsUUFBUSxDQUFDK0MsaUJBQVQsR0FBNkIsZUFBZUEsaUJBQWYsQ0FBa0M1QyxFQUFsQyxFQUFzQztBQUNqRSxTQUFPLE1BQU0sS0FBS2dDLFdBQUwsQ0FBaUJoQyxFQUFqQixDQUFiO0FBQ0QsQ0FGRDs7QUFJQUgsUUFBUSxDQUFDc0MsT0FBVCxHQUFtQixlQUFlQSxPQUFmLENBQXdCbkMsRUFBeEIsRUFBNEI7QUFDN0NBLEVBQUFBLEVBQUUsR0FBR0Msb0JBQUtDLGFBQUwsQ0FBbUJGLEVBQW5CLENBQUw7O0FBQ0EsTUFBSSxLQUFLRyxZQUFMLEVBQUosRUFBeUI7QUFDdkIsUUFBSUMsWUFBWSxHQUFHLEtBQUttQixlQUFMLENBQXFCdkIsRUFBckIsQ0FBbkI7O0FBQ0EsUUFBSUksWUFBWSxLQUFLLElBQXJCLEVBQTJCO0FBQ3pCLFlBQU0sSUFBSW9CLHlCQUFPQyxZQUFYLENBQXlCLHVEQUFzRHpCLEVBQUcsR0FBbEYsQ0FBTjtBQUNEOztBQUNELFdBQU8sTUFBTSxLQUFLTSxXQUFMLENBQWlCLFVBQWpCLEVBQTZCLENBQUNGLFlBQUQsQ0FBN0IsQ0FBYjtBQUNEOztBQUVELFFBQU11QyxJQUFJLEdBQUcsTUFBTSxLQUFLZCxjQUFMLENBQW9CN0IsRUFBcEIsQ0FBbkI7QUFDQSxTQUFPO0FBQUNpQyxJQUFBQSxLQUFLLEVBQUVVLElBQUksQ0FBQ1YsS0FBYjtBQUFvQkMsSUFBQUEsTUFBTSxFQUFFUyxJQUFJLENBQUNUO0FBQWpDLEdBQVA7QUFDRCxDQVpEOztBQTBCQSxTQUFTVyxpQkFBVCxDQUE0QkMsR0FBNUIsRUFBaUM7QUFDL0IsTUFBSSxDQUFDLENBQUM3QixnQkFBRThCLE9BQUgsRUFBWTlCLGdCQUFFRSxRQUFkLEVBQXdCRixnQkFBRStCLFFBQTFCLEVBQW9DQyxJQUFwQyxDQUEwQ0MsQ0FBRCxJQUFPQSxDQUFDLENBQUNKLEdBQUQsQ0FBakQsQ0FBTCxFQUE4RDtBQUM1RCxVQUFNLElBQUlLLEtBQUosQ0FBVyxxRUFBRCxHQUNiLGFBQVkvQixJQUFJLENBQUNDLFNBQUwsQ0FBZXlCLEdBQWYsQ0FBb0IsRUFEN0IsQ0FBTjtBQUVEOztBQUlELE1BQUk3QixnQkFBRThCLE9BQUYsQ0FBVUQsR0FBVixDQUFKLEVBQW9CO0FBQ2xCQSxJQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ00sSUFBSixDQUFTLEVBQVQsQ0FBTjtBQUNELEdBRkQsTUFFTyxJQUFJbkMsZ0JBQUUrQixRQUFGLENBQVdGLEdBQVgsQ0FBSixFQUFxQjtBQUMxQkEsSUFBQUEsR0FBRyxHQUFJLEdBQUVBLEdBQUksRUFBYjtBQUNEOztBQUdELFNBQU8sQ0FBQyxHQUFHQSxHQUFKLEVBQVNPLEdBQVQsQ0FBY0MsQ0FBRCxJQUFPO0FBQ3pCLFFBQUksQ0FBQyxRQUFELEVBQVcsUUFBWCxFQUFxQnRDLFFBQXJCLENBQThCc0MsQ0FBOUIsQ0FBSixFQUFzQztBQUNwQyxhQUFPLElBQVA7QUFDRDs7QUFDRCxRQUFJLENBQUMsUUFBRCxFQUFXLFFBQVgsRUFBcUJ0QyxRQUFyQixDQUE4QnNDLENBQTlCLENBQUosRUFBc0M7QUFDcEMsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsV0FBT0EsQ0FBUDtBQUNELEdBUk0sQ0FBUDtBQVNEOztBQUVEekQsUUFBUSxDQUFDMEQsaUJBQVQsR0FBNkIsZUFBZUEsaUJBQWYsQ0FBa0N4QyxLQUFsQyxFQUF5Q2YsRUFBekMsRUFBNkM7QUFFeEV3RCxrQkFBSUMsSUFBSixDQUFTLDJGQUFUOztBQUNBLFFBQU0sS0FBS0MsUUFBTCxDQUFjM0MsS0FBZCxFQUFxQmYsRUFBckIsQ0FBTjtBQUNELENBSkQ7O0FBTUFILFFBQVEsQ0FBQzZELFFBQVQsR0FBb0IsZUFBZUEsUUFBZixDQUF5QjNDLEtBQXpCLEVBQWdDZixFQUFoQyxFQUFvQztBQUN0REEsRUFBQUEsRUFBRSxHQUFHQyxvQkFBS0MsYUFBTCxDQUFtQkYsRUFBbkIsQ0FBTDs7QUFDQSxNQUFJLENBQUMsS0FBS0csWUFBTCxFQUFMLEVBQTBCO0FBQ3hCLFVBQU0sS0FBS0ksWUFBTCxDQUFtQixZQUFXUCxFQUFHLFFBQWpDLEVBQTBDLE1BQTFDLEVBQWtEO0FBQ3REZSxNQUFBQSxLQUFLLEVBQUU4QixpQkFBaUIsQ0FBQzlCLEtBQUQ7QUFEOEIsS0FBbEQsQ0FBTjtBQUdBO0FBQ0Q7O0FBRUQsUUFBTVgsWUFBWSxHQUFHLEtBQUtDLGVBQUwsQ0FBcUJMLEVBQXJCLENBQXJCO0FBQ0EsUUFBTSxLQUFLTSxXQUFMLENBQWlCLE9BQWpCLEVBQTBCLENBQUNGLFlBQUQsQ0FBMUIsQ0FBTjtBQUNBLFFBQU0sS0FBS0UsV0FBTCxDQUFpQixNQUFqQixFQUF5QixDQUFDRixZQUFELEVBQWVXLEtBQWYsQ0FBekIsQ0FBTjtBQUNELENBWkQ7O0FBY0FsQixRQUFRLENBQUM4RCxJQUFULEdBQWdCLGVBQWVBLElBQWYsQ0FBcUI1QyxLQUFyQixFQUE0QjtBQUMxQyxRQUFNLEtBQUtSLFlBQUwsQ0FBa0IsV0FBbEIsRUFBK0IsTUFBL0IsRUFBdUM7QUFDM0NRLElBQUFBLEtBQUssRUFBRThCLGlCQUFpQixDQUFDOUIsS0FBRDtBQURtQixHQUF2QyxDQUFOO0FBR0QsQ0FKRDs7QUFNQWxCLFFBQVEsQ0FBQytELEtBQVQsR0FBaUIsZUFBZUEsS0FBZixDQUFzQjVELEVBQXRCLEVBQTBCO0FBQ3pDQSxFQUFBQSxFQUFFLEdBQUdDLG9CQUFLQyxhQUFMLENBQW1CRixFQUFuQixDQUFMOztBQUNBLE1BQUksS0FBS0csWUFBTCxFQUFKLEVBQXlCO0FBQ3ZCLFVBQU1DLFlBQVksR0FBRyxLQUFLQyxlQUFMLENBQXFCTCxFQUFyQixDQUFyQjtBQUNBLFVBQU0sS0FBS00sV0FBTCxDQUFpQixPQUFqQixFQUEwQixDQUFDRixZQUFELENBQTFCLENBQU47QUFDQTtBQUNEOztBQUNELFFBQU0sS0FBS0csWUFBTCxDQUFtQixZQUFXUCxFQUFHLFFBQWpDLEVBQTBDLE1BQTFDLENBQU47QUFDRCxDQVJEOztBQVVBSCxRQUFRLENBQUNpQixjQUFULEdBQTBCLGVBQWVBLGNBQWYsQ0FBK0JkLEVBQS9CLEVBQW1DO0FBQzNELE1BQUksS0FBS0csWUFBTCxFQUFKLEVBQXlCO0FBQ3ZCLFVBQU0sSUFBSXFCLHlCQUFPcUMsc0JBQVgsQ0FBa0MsaUdBQWxDLENBQU47QUFDRDs7QUFFRCxRQUFNQyxJQUFJLEdBQUcsTUFBTSxLQUFLeEMsWUFBTCxDQUFrQixNQUFsQixFQUEwQnRCLEVBQTFCLENBQW5COztBQUVBLE1BQUk4RCxJQUFJLEtBQUssc0JBQVQsSUFDQUEsSUFBSSxLQUFLLCtCQURiLEVBQzhDO0FBQzVDLFVBQU0sSUFBSVgsS0FBSixDQUFXLG9DQUFtQ1csSUFBSyxjQUF6QyxHQUNDLDZCQURYLENBQU47QUFFRDs7QUFDRCxNQUFJQyxPQUFPLEdBQUcsR0FBZDs7QUFDQSxNQUFJRCxJQUFJLEtBQUssc0JBQWIsRUFBcUM7QUFFbkNDLElBQUFBLE9BQU8sR0FBRyxxQkFBVjtBQUNEOztBQUVELE1BQUlDLGFBQWEsR0FBRyxDQUFwQjtBQUNBLFFBQU1DLFFBQVEsR0FBRyxNQUFNLEtBQUtDLFdBQUwsQ0FBa0IsYUFBbEIsRUFBZ0NILE9BQWhDLEVBQXlDLElBQXpDLEVBQStDL0QsRUFBL0MsQ0FBdkI7O0FBQ0EsTUFBSWlFLFFBQVEsQ0FBQ0UsTUFBVCxLQUFvQixDQUF4QixFQUEyQjtBQUd6QixVQUFNeEIsSUFBSSxHQUFHLE1BQU0sS0FBS2QsY0FBTCxDQUFvQlosZ0JBQUVtRCxJQUFGLENBQU9ILFFBQVAsQ0FBcEIsQ0FBbkI7QUFDQUQsSUFBQUEsYUFBYSxHQUFHckIsSUFBSSxDQUFDVCxNQUFyQjtBQUNELEdBTEQsTUFLTyxJQUFJK0IsUUFBUSxDQUFDRSxNQUFiLEVBQXFCO0FBRzFCLFlBQVFMLElBQVI7QUFDRSxXQUFLLHNCQUFMO0FBQTZCO0FBQzNCLGdCQUFNTyxTQUFTLEdBQUcsTUFBTSxLQUFLeEMsY0FBTCxDQUFvQlosZ0JBQUVtRCxJQUFGLENBQU9ILFFBQVAsQ0FBcEIsQ0FBeEI7QUFDQSxnQkFBTUssUUFBUSxHQUFHLE1BQU0sS0FBS3pDLGNBQUwsQ0FBb0JaLGdCQUFFc0QsSUFBRixDQUFPTixRQUFQLENBQXBCLENBQXZCO0FBQ0FELFVBQUFBLGFBQWEsR0FBR00sUUFBUSxDQUFDdkMsQ0FBVCxHQUFhdUMsUUFBUSxDQUFDcEMsTUFBdEIsR0FBK0JtQyxTQUFTLENBQUN0QyxDQUF6RDtBQUNBO0FBQ0Q7O0FBQ0QsV0FBSywrQkFBTDtBQUFzQztBQUNwQyxjQUFJeUMsUUFBUSxHQUFHLENBQWY7QUFDQSxjQUFJSCxTQUFTLEdBQUcsTUFBTSxLQUFLeEMsY0FBTCxDQUFvQlosZ0JBQUVtRCxJQUFGLENBQU9ILFFBQVAsQ0FBcEIsQ0FBdEI7QUFDQSxjQUFJUSxZQUFZLEdBQUcsQ0FBQ0osU0FBRCxDQUFuQjs7QUFDQSxlQUFLLElBQUlLLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdULFFBQVEsQ0FBQ0UsTUFBN0IsRUFBcUNPLENBQUMsRUFBdEMsRUFBMEM7QUFDeEMsa0JBQU0vQixJQUFJLEdBQUcsTUFBTSxLQUFLZCxjQUFMLENBQW9Cb0MsUUFBUSxDQUFDUyxDQUFELENBQTVCLENBQW5CO0FBQ0FELFlBQUFBLFlBQVksQ0FBQ0UsSUFBYixDQUFrQmhDLElBQWxCOztBQUNBLGdCQUFJQSxJQUFJLENBQUNaLENBQUwsS0FBV3NDLFNBQVMsQ0FBQ3RDLENBQXpCLEVBQTRCO0FBQzFCeUMsY0FBQUEsUUFBUSxHQUFHRSxDQUFYO0FBQ0E7QUFDRDtBQUNGOztBQUNELGdCQUFNRSxlQUFlLEdBQUdILFlBQVksQ0FBQ0QsUUFBRCxDQUFaLENBQXVCekMsQ0FBdkIsR0FBMkIwQyxZQUFZLENBQUNELFFBQVEsR0FBRyxDQUFaLENBQVosQ0FBMkJ6QyxDQUF0RCxHQUEwRDBDLFlBQVksQ0FBQ0QsUUFBUSxHQUFHLENBQVosQ0FBWixDQUEyQnRDLE1BQTdHO0FBQ0EsZ0JBQU0yQyxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsSUFBTCxDQUFVZCxRQUFRLENBQUNFLE1BQVQsR0FBa0JLLFFBQTVCLENBQWhCO0FBR0FSLFVBQUFBLGFBQWEsR0FBSWEsT0FBTyxHQUFHUixTQUFTLENBQUNuQyxNQUFyQixHQUFnQzBDLGVBQWUsSUFBSUMsT0FBTyxHQUFHLENBQWQsQ0FBL0Q7QUFDQTtBQUNEOztBQUNEO0FBQVMsY0FBTSxJQUFJMUIsS0FBSixDQUFXLDRCQUEyQlcsSUFBSyxZQUFqQyxHQUNDLDZDQURYLENBQU47QUExQlg7QUE2QkQ7O0FBQ0QsUUFBTWtCLElBQUksR0FBRyxNQUFNLEtBQUs3QyxPQUFMLENBQWFuQyxFQUFiLENBQW5CO0FBQ0EsUUFBTWlGLE1BQU0sR0FBRyxNQUFNLEtBQUtyQyxpQkFBTCxDQUF1QjVDLEVBQXZCLENBQXJCO0FBRUEsU0FBT29CLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQ3BCWSxJQUFBQSxLQUFLLEVBQUUrQyxJQUFJLENBQUMvQyxLQURRO0FBRXBCQyxJQUFBQSxNQUFNLEVBQUU4QyxJQUFJLENBQUM5QyxNQUZPO0FBR3BCZ0QsSUFBQUEsR0FBRyxFQUFFRCxNQUFNLENBQUNsRCxDQUhRO0FBSXBCb0QsSUFBQUEsSUFBSSxFQUFFRixNQUFNLENBQUNuRCxDQUpPO0FBS3BCc0QsSUFBQUEsZ0JBQWdCLEVBQUVwQjtBQUxFLEdBQWYsQ0FBUDtBQU9ELENBcEVEOztBQXNFQW5FLFFBQVEsQ0FBQ3dGLGVBQVQsR0FBMkIsZUFBZUEsZUFBZixHQUFrQztBQUMzRCxNQUFJO0FBQ0YsVUFBTSxLQUFLQywyQkFBTCxDQUFpQyxZQUFqQyxFQUErQyx5QkFBL0MsRUFBMEUsS0FBMUUsQ0FBTjtBQUNBLFdBQU8sSUFBUDtBQUNELEdBSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVk7QUFDWixXQUFPLEtBQVA7QUFDRDtBQUNGLENBUEQ7O0FBU0FDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjM0YsVUFBZCxFQUEwQkQsUUFBMUI7ZUFFZUMsVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdhcHBpdW0tYmFzZS1kcml2ZXInO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcblxuXG5jb25zdCBjb21tYW5kcyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmVsZW1lbnREaXNwbGF5ZWQgPSBhc3luYyBmdW5jdGlvbiBlbGVtZW50RGlzcGxheWVkIChlbCkge1xuICBlbCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy51c2VBdG9tc0VsZW1lbnQoZWwpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdpc19kaXNwbGF5ZWQnLCBbYXRvbXNFbGVtZW50XSk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWx9L2Rpc3BsYXllZGAsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLmVsZW1lbnRFbmFibGVkID0gYXN5bmMgZnVuY3Rpb24gZWxlbWVudEVuYWJsZWQgKGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBjb25zdCBhdG9tc0VsZW1lbnQgPSB0aGlzLnVzZUF0b21zRWxlbWVudChlbCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2lzX2VuYWJsZWQnLCBbYXRvbXNFbGVtZW50XSk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWx9L2VuYWJsZWRgLCAnR0VUJyk7XG59O1xuXG5jb21tYW5kcy5lbGVtZW50U2VsZWN0ZWQgPSBhc3luYyBmdW5jdGlvbiBlbGVtZW50U2VsZWN0ZWQgKGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBjb25zdCBhdG9tc0VsZW1lbnQgPSB0aGlzLnVzZUF0b21zRWxlbWVudChlbCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2lzX3NlbGVjdGVkJywgW2F0b21zRWxlbWVudF0pO1xuICB9XG5cbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke2VsfS9zZWxlY3RlZGAsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLmdldE5hbWUgPSBhc3luYyBmdW5jdGlvbiBnZXROYW1lIChlbCkge1xuICBlbCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy51c2VBdG9tc0VsZW1lbnQoZWwpO1xuICAgIGNvbnN0IHNjcmlwdCA9ICdyZXR1cm4gYXJndW1lbnRzWzBdLnRhZ05hbWUudG9Mb3dlckNhc2UoKSc7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2V4ZWN1dGVfc2NyaXB0JywgW3NjcmlwdCwgW2F0b21zRWxlbWVudF1dKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHtlbH0vbmFtZWAsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLmdldE5hdGl2ZUF0dHJpYnV0ZSA9IGFzeW5jIGZ1bmN0aW9uIGdldE5hdGl2ZUF0dHJpYnV0ZSAoYXR0cmlidXRlLCBlbCkge1xuICBpZiAoYXR0cmlidXRlID09PSAnY29udGVudFNpemUnKSB7XG4gICAgLy8gZG9uJ3QgcHJveHkgcmVxdWVzdHMgZm9yIHRoZSBjb250ZW50IHNpemUgb2YgYSBzY3JvbGxhYmxlIGVsZW1lbnRcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRDb250ZW50U2l6ZShlbCk7XG4gIH1cblxuICBlbCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG5cbiAgLy8gb3RoZXJ3aXNlIGxldCBXREEgaGFuZGxlIGF0dHJpYnV0ZSByZXF1ZXN0c1xuICBsZXQgdmFsdWUgPSBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHtlbH0vYXR0cmlidXRlLyR7YXR0cmlidXRlfWAsICdHRVQnKTtcbiAgLy8gVHJhbnNmb3JtIHRoZSByZXN1bHQgZm9yIHRoZSBjYXNlIHdoZW4gV0RBIHJldHVybnMgYW4gaW50ZWdlciByZXByZXNlbnRhdGlvbiBmb3IgYSBib29sZWFuIHZhbHVlXG4gIGlmIChbMCwgMV0uaW5jbHVkZXModmFsdWUpKSB7XG4gICAgdmFsdWUgPSAhIXZhbHVlO1xuICB9XG4gIC8vIFRoZSByZXR1cm5lZCB2YWx1ZSBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nIGFjY29yZGluZyB0byBodHRwczovL3d3dy53My5vcmcvVFIvd2ViZHJpdmVyLyNnZXQtZWxlbWVudC1hdHRyaWJ1dGVcbiAgcmV0dXJuIChfLmlzTnVsbCh2YWx1ZSkgfHwgXy5pc1N0cmluZyh2YWx1ZSkpID8gdmFsdWUgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG59O1xuXG5jb21tYW5kcy5nZXRBdHRyaWJ1dGUgPSBhc3luYyBmdW5jdGlvbiBnZXRBdHRyaWJ1dGUgKGF0dHJpYnV0ZSwgZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXROYXRpdmVBdHRyaWJ1dGUoYXR0cmlidXRlLCBlbCk7XG4gIH1cbiAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy5nZXRBdG9tc0VsZW1lbnQoZWwpO1xuICBpZiAoXy5pc051bGwoYXRvbXNFbGVtZW50KSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkVycm9yKGBFcnJvciBjb252ZXJ0aW5nIGVsZW1lbnQgSUQgZm9yIHVzaW5nIGluIFdEIGF0b21zOiAnJHtlbH1gKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZ2V0X2F0dHJpYnV0ZV92YWx1ZScsIFthdG9tc0VsZW1lbnQsIGF0dHJpYnV0ZV0pO1xufTtcblxuY29tbWFuZHMuZ2V0UHJvcGVydHkgPSBhc3luYyBmdW5jdGlvbiBnZXRQcm9wZXJ0eSAocHJvcGVydHksIGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0TmF0aXZlQXR0cmlidXRlKHByb3BlcnR5LCBlbCk7XG4gIH1cbiAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy5nZXRBdG9tc0VsZW1lbnQoZWwpO1xuICBpZiAoXy5pc051bGwoYXRvbXNFbGVtZW50KSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuVW5rbm93bkVycm9yKGBFcnJvciBjb252ZXJ0aW5nIGVsZW1lbnQgSUQgZm9yIHVzaW5nIGluIFdEIGF0b21zOiAnJHtlbH1gKTtcbiAgfVxuICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZ2V0X2F0dHJpYnV0ZV92YWx1ZScsIFthdG9tc0VsZW1lbnQsIHByb3BlcnR5XSk7XG59O1xuXG5jb21tYW5kcy5nZXRUZXh0ID0gYXN5bmMgZnVuY3Rpb24gZ2V0VGV4dCAoZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoYC9lbGVtZW50LyR7ZWx9L3RleHRgLCAnR0VUJyk7XG4gIH1cbiAgbGV0IGF0b21zRWxlbWVudCA9IHRoaXMudXNlQXRvbXNFbGVtZW50KGVsKTtcbiAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2dldF90ZXh0JywgW2F0b21zRWxlbWVudF0pO1xufTtcblxuY29tbWFuZHMuZ2V0RWxlbWVudFJlY3QgPSBhc3luYyBmdW5jdGlvbiBnZXRFbGVtZW50UmVjdCAoZWwpIHtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICAvLyBNb2JpbGUgc2FmYXJpIGRvZXNuJ3Qgc3VwcG9ydCByZWN0XG4gICAgY29uc3Qge3gsIHl9ID0gYXdhaXQgdGhpcy5nZXRMb2NhdGlvbihlbCk7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gYXdhaXQgdGhpcy5nZXRTaXplKGVsKTtcbiAgICByZXR1cm4ge3gsIHksIHdpZHRoLCBoZWlnaHR9O1xuICB9XG5cbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5nZXROYXRpdmVSZWN0KGVsKTtcbn07XG5cbmV4dGVuc2lvbnMuZ2V0TmF0aXZlUmVjdCA9IGFzeW5jIGZ1bmN0aW9uIGdldE5hdGl2ZVJlY3QgKGVsKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHtlbH0vcmVjdGAsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLmdldExvY2F0aW9uID0gYXN5bmMgZnVuY3Rpb24gZ2V0TG9jYXRpb24gKGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBjb25zdCBhdG9tc0VsZW1lbnQgPSBhd2FpdCB0aGlzLnVzZUF0b21zRWxlbWVudChlbCk7XG4gICAgbGV0IGxvYyA9IGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2dldF90b3BfbGVmdF9jb29yZGluYXRlcycsIFthdG9tc0VsZW1lbnRdKTtcbiAgICBpZiAodGhpcy5vcHRzLmFic29sdXRlV2ViTG9jYXRpb25zKSB7XG4gICAgICBjb25zdCBzY3JpcHQgPSAncmV0dXJuIFtkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQsIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wXTsnO1xuICAgICAgY29uc3QgW3hPZmZzZXQsIHlPZmZzZXRdID0gYXdhaXQgdGhpcy5leGVjdXRlKHNjcmlwdCk7XG4gICAgICBsb2MueCArPSB4T2Zmc2V0O1xuICAgICAgbG9jLnkgKz0geU9mZnNldDtcbiAgICB9XG4gICAgcmV0dXJuIGxvYztcbiAgfVxuXG4gIGNvbnN0IHJlY3QgPSBhd2FpdCB0aGlzLmdldEVsZW1lbnRSZWN0KGVsKTtcbiAgcmV0dXJuIHt4OiByZWN0LngsIHk6IHJlY3QueX07XG59O1xuXG5jb21tYW5kcy5nZXRMb2NhdGlvbkluVmlldyA9IGFzeW5jIGZ1bmN0aW9uIGdldExvY2F0aW9uSW5WaWV3IChlbCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5nZXRMb2NhdGlvbihlbCk7XG59O1xuXG5jb21tYW5kcy5nZXRTaXplID0gYXN5bmMgZnVuY3Rpb24gZ2V0U2l6ZSAoZWwpIHtcbiAgZWwgPSB1dGlsLnVud3JhcEVsZW1lbnQoZWwpO1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGxldCBhdG9tc0VsZW1lbnQgPSB0aGlzLmdldEF0b21zRWxlbWVudChlbCk7XG4gICAgaWYgKGF0b21zRWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoYEVycm9yIGNvbnZlcnRpbmcgZWxlbWVudCBJRCBmb3IgdXNpbmcgaW4gV0QgYXRvbXM6ICcke2VsfSdgKTtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2dldF9zaXplJywgW2F0b21zRWxlbWVudF0pO1xuICB9XG5cbiAgY29uc3QgcmVjdCA9IGF3YWl0IHRoaXMuZ2V0RWxlbWVudFJlY3QoZWwpO1xuICByZXR1cm4ge3dpZHRoOiByZWN0LndpZHRoLCBoZWlnaHQ6IHJlY3QuaGVpZ2h0fTtcbn07XG5cbi8qKlxuICogUHJlcGFyZXMgdGhlIGlucHV0IHZhbHVlIHRvIGJlIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byBXREEuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8QXJyYXk8c3RyaW5nPnxudW1iZXJ9IGlucCBUaGUgYWN0dWFsIHRleHQgdG8gdHlwZS5cbiAqIEFjY2VwdGFibGUgdmFsdWVzIG9mIGBpbnBgOlxuICogICBbJ3NvbWUgdGV4dCddXG4gKiAgIFsncycsICdvJywgJ20nLCAnZScsICcgJywgJ3QnLCAnZScsICd4JywgJ3QnXVxuICogICAnc29tZSB0ZXh0J1xuICogICAxMjM0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHZhbHVlIGlzIG5vdCBhY2NlcHRhYmxlIGZvciBpbnB1dFxuICogQHJldHVybnMge0FycmF5PHN0cmluZz59IFRoZSBwcmVwcm9jZXNzZWQgdmFsdWVcbiAqL1xuZnVuY3Rpb24gcHJlcGFyZUlucHV0VmFsdWUgKGlucCkge1xuICBpZiAoIVtfLmlzQXJyYXksIF8uaXNTdHJpbmcsIF8uaXNGaW5pdGVdLnNvbWUoKGYpID0+IGYoaW5wKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE9ubHkgc3RyaW5ncywgbnVtYmVycyBhbmQgYXJyYXlzIGFyZSBzdXBwb3J0ZWQgYXMgaW5wdXQgYXJndW1lbnRzLiBgICtcbiAgICAgIGBSZWNlaXZlZDogJHtKU09OLnN0cmluZ2lmeShpbnApfWApO1xuICB9XG5cbiAgLy8gbWFrZSBpdCBpbnRvIGEgc3RyaW5nLCBzbyB0aGVuIHdlIGFzc3VyZVxuICAvLyB0aGUgYXJyYXkgaXRlbXMgYXJlIHNpbmdsZSBjaGFyYWN0ZXJzXG4gIGlmIChfLmlzQXJyYXkoaW5wKSkge1xuICAgIGlucCA9IGlucC5qb2luKCcnKTtcbiAgfSBlbHNlIGlmIChfLmlzRmluaXRlKGlucCkpIHtcbiAgICBpbnAgPSBgJHtpbnB9YDtcbiAgfVxuICAvLyBUaGUgYHNwbGl0YCBtZXRob2QgbXVzdCBub3QgYmUgdXNlZCBvbiB0aGUgc3RyaW5nXG4gIC8vIHRvIHByb3Blcmx5IGhhbmRsZSBhbGwgVW5pY29kZSBjb2RlIHBvaW50c1xuICByZXR1cm4gWy4uLmlucF0ubWFwKChrKSA9PiB7XG4gICAgaWYgKFsnXFx1RTAwNicsICdcXHVFMDA3J10uaW5jbHVkZXMoaykpIHsgLy8gUkVUVVJOIG9yIEVOVEVSXG4gICAgICByZXR1cm4gJ1xcbic7XG4gICAgfVxuICAgIGlmIChbJ1xcdUUwMDMnLCAnXFx1ZTAxNyddLmluY2x1ZGVzKGspKSB7IC8vIEJBQ0tTUEFDRSBvciBERUxFVEVcbiAgICAgIHJldHVybiAnXFxiJztcbiAgICB9XG4gICAgcmV0dXJuIGs7XG4gIH0pO1xufVxuXG5jb21tYW5kcy5zZXRWYWx1ZUltbWVkaWF0ZSA9IGFzeW5jIGZ1bmN0aW9uIHNldFZhbHVlSW1tZWRpYXRlICh2YWx1ZSwgZWwpIHtcbiAgLy8gV0RBIGRvZXMgbm90IHByb3ZpZGUgbm8gd2F5IHRvIHNldCB0aGUgdmFsdWUgZGlyZWN0bHlcbiAgbG9nLmluZm8oJ1RoZXJlIGlzIGN1cnJlbnRseSBubyB3YXkgdG8gYnlwYXNzIHR5cGluZyB1c2luZyBYQ1VJVGVzdC4gU2V0dGluZyB2YWx1ZSB0aHJvdWdoIGtleWJvYXJkJyk7XG4gIGF3YWl0IHRoaXMuc2V0VmFsdWUodmFsdWUsIGVsKTtcbn07XG5cbmNvbW1hbmRzLnNldFZhbHVlID0gYXN5bmMgZnVuY3Rpb24gc2V0VmFsdWUgKHZhbHVlLCBlbCkge1xuICBlbCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke2VsfS92YWx1ZWAsICdQT1NUJywge1xuICAgICAgdmFsdWU6IHByZXBhcmVJbnB1dFZhbHVlKHZhbHVlKSxcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhdG9tc0VsZW1lbnQgPSB0aGlzLnVzZUF0b21zRWxlbWVudChlbCk7XG4gIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2NsaWNrJywgW2F0b21zRWxlbWVudF0pO1xuICBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCd0eXBlJywgW2F0b21zRWxlbWVudCwgdmFsdWVdKTtcbn07XG5cbmNvbW1hbmRzLmtleXMgPSBhc3luYyBmdW5jdGlvbiBrZXlzICh2YWx1ZSkge1xuICBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9rZXlzJywgJ1BPU1QnLCB7XG4gICAgdmFsdWU6IHByZXBhcmVJbnB1dFZhbHVlKHZhbHVlKSxcbiAgfSk7XG59O1xuXG5jb21tYW5kcy5jbGVhciA9IGFzeW5jIGZ1bmN0aW9uIGNsZWFyIChlbCkge1xuICBlbCA9IHV0aWwudW53cmFwRWxlbWVudChlbCk7XG4gIGlmICh0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgY29uc3QgYXRvbXNFbGVtZW50ID0gdGhpcy51c2VBdG9tc0VsZW1lbnQoZWwpO1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2NsZWFyJywgW2F0b21zRWxlbWVudF0pO1xuICAgIHJldHVybjtcbiAgfVxuICBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZChgL2VsZW1lbnQvJHtlbH0vY2xlYXJgLCAnUE9TVCcpO1xufTtcblxuY29tbWFuZHMuZ2V0Q29udGVudFNpemUgPSBhc3luYyBmdW5jdGlvbiBnZXRDb250ZW50U2l6ZSAoZWwpIHtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdFlldEltcGxlbWVudGVkRXJyb3IoJ1N1cHBvcnQgZm9yIGdldENvbnRlbnRTaXplIGZvciB3ZWIgY29udGV4dCBpcyBub3QgeWV0IGltcGxlbWVudGVkLiBQbGVhc2UgY29udGFjdCBhbiBBcHBpdW0gZGV2Jyk7XG4gIH1cblxuICBjb25zdCB0eXBlID0gYXdhaXQgdGhpcy5nZXRBdHRyaWJ1dGUoJ3R5cGUnLCBlbCk7XG5cbiAgaWYgKHR5cGUgIT09ICdYQ1VJRWxlbWVudFR5cGVUYWJsZScgJiZcbiAgICAgIHR5cGUgIT09ICdYQ1VJRWxlbWVudFR5cGVDb2xsZWN0aW9uVmlldycpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbid0IGdldCBjb250ZW50IHNpemUgZm9yIHR5cGUgJyR7dHlwZX0nLCBvbmx5IGZvciBgICtcbiAgICAgICAgICAgICAgICAgICAgYHRhYmxlcyBhbmQgY29sbGVjdGlvbiB2aWV3c2ApO1xuICB9XG4gIGxldCBsb2NhdG9yID0gJyonO1xuICBpZiAodHlwZSA9PT0gJ1hDVUlFbGVtZW50VHlwZVRhYmxlJykge1xuICAgIC8vIG9ubHkgZmluZCB0YWJsZSBjZWxscywgbm90IGp1c3QgYW55IGNoaWxkcmVuXG4gICAgbG9jYXRvciA9ICdYQ1VJRWxlbWVudFR5cGVDZWxsJztcbiAgfVxuXG4gIGxldCBjb250ZW50SGVpZ2h0ID0gMDtcbiAgY29uc3QgY2hpbGRyZW4gPSBhd2FpdCB0aGlzLmZpbmRFbE9yRWxzKGBjbGFzcyBjaGFpbmAsIGxvY2F0b3IsIHRydWUsIGVsKTtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSkge1xuICAgIC8vIGlmIHdlIGtub3cgdGhlcmUncyBvbmx5IG9uZSBlbGVtZW50LCB3ZSBjYW4gb3B0aW1pemUgdG8gbWFrZSBqdXN0IG9uZVxuICAgIC8vIGNhbGwgdG8gV0RBXG4gICAgY29uc3QgcmVjdCA9IGF3YWl0IHRoaXMuZ2V0RWxlbWVudFJlY3QoXy5oZWFkKGNoaWxkcmVuKSk7XG4gICAgY29udGVudEhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIC8vIG90aGVyd2lzZSBpZiB3ZSBoYXZlIG11bHRpcGxlIGVsZW1lbnRzLCBsb2dpYyBkaWZmZXJzIGJhc2VkIG9uIGVsZW1lbnRcbiAgICAvLyB0eXBlXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdYQ1VJRWxlbWVudFR5cGVUYWJsZSc6IHtcbiAgICAgICAgY29uc3QgZmlyc3RSZWN0ID0gYXdhaXQgdGhpcy5nZXRFbGVtZW50UmVjdChfLmhlYWQoY2hpbGRyZW4pKTtcbiAgICAgICAgY29uc3QgbGFzdFJlY3QgPSBhd2FpdCB0aGlzLmdldEVsZW1lbnRSZWN0KF8ubGFzdChjaGlsZHJlbikpO1xuICAgICAgICBjb250ZW50SGVpZ2h0ID0gbGFzdFJlY3QueSArIGxhc3RSZWN0LmhlaWdodCAtIGZpcnN0UmVjdC55O1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ1hDVUlFbGVtZW50VHlwZUNvbGxlY3Rpb25WaWV3Jzoge1xuICAgICAgICBsZXQgZWxzSW5Sb3cgPSAxOyAvLyB3ZSBrbm93IHRoZXJlIG11c3QgYmUgYXQgbGVhc3Qgb25lIGVsZW1lbnQgaW4gdGhlIHJvd1xuICAgICAgICBsZXQgZmlyc3RSZWN0ID0gYXdhaXQgdGhpcy5nZXRFbGVtZW50UmVjdChfLmhlYWQoY2hpbGRyZW4pKTtcbiAgICAgICAgbGV0IGluaXRpYWxSZWN0cyA9IFtmaXJzdFJlY3RdO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgcmVjdCA9IGF3YWl0IHRoaXMuZ2V0RWxlbWVudFJlY3QoY2hpbGRyZW5baV0pO1xuICAgICAgICAgIGluaXRpYWxSZWN0cy5wdXNoKHJlY3QpO1xuICAgICAgICAgIGlmIChyZWN0LnkgIT09IGZpcnN0UmVjdC55KSB7XG4gICAgICAgICAgICBlbHNJblJvdyA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3BhY2VCZXR3ZWVuRWxzID0gaW5pdGlhbFJlY3RzW2Vsc0luUm93XS55IC0gaW5pdGlhbFJlY3RzW2Vsc0luUm93IC0gMV0ueSAtIGluaXRpYWxSZWN0c1tlbHNJblJvdyAtIDFdLmhlaWdodDtcbiAgICAgICAgY29uc3QgbnVtUm93cyA9IE1hdGguY2VpbChjaGlsZHJlbi5sZW5ndGggLyBlbHNJblJvdyk7XG5cbiAgICAgICAgLy8gYXNzdW1lIGFsbCBjZWxscyBhcmUgdGhlIHNhbWUgaGVpZ2h0XG4gICAgICAgIGNvbnRlbnRIZWlnaHQgPSAobnVtUm93cyAqIGZpcnN0UmVjdC5oZWlnaHQpICsgKHNwYWNlQmV0d2VlbkVscyAqIChudW1Sb3dzIC0gMSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihgUHJvZ3JhbW1pbmcgZXJyb3I6IHR5cGUgJyR7dHlwZX0nIHdhcyBub3QgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHZhbGlkIGJ1dCBzaG91bGQgaGF2ZSBhbHJlYWR5IGJlZW4gcmVqZWN0ZWRgKTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2l6ZSA9IGF3YWl0IHRoaXMuZ2V0U2l6ZShlbCk7XG4gIGNvbnN0IG9yaWdpbiA9IGF3YWl0IHRoaXMuZ2V0TG9jYXRpb25JblZpZXcoZWwpO1xuICAvLyBhdHRyaWJ1dGVzIGhhdmUgdG8gYmUgc3RyaW5ncywgc28gc3RyaW5naWZ5IHRoaXMgdXBcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICB3aWR0aDogc2l6ZS53aWR0aCxcbiAgICBoZWlnaHQ6IHNpemUuaGVpZ2h0LFxuICAgIHRvcDogb3JpZ2luLnksXG4gICAgbGVmdDogb3JpZ2luLngsXG4gICAgc2Nyb2xsYWJsZU9mZnNldDogY29udGVudEhlaWdodFxuICB9KTtcbn07XG5cbmNvbW1hbmRzLmlzS2V5Ym9hcmRTaG93biA9IGFzeW5jIGZ1bmN0aW9uIGlzS2V5Ym9hcmRTaG93biAoKSB7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5maW5kTmF0aXZlRWxlbWVudE9yRWxlbWVudHMoJ2NsYXNzIG5hbWUnLCAnWENVSUVsZW1lbnRUeXBlS2V5Ym9hcmQnLCBmYWxzZSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGlnbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcyk7XG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2NvbW1hbmRzL2VsZW1lbnQuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
