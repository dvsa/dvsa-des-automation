"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setValue = exports.getValue = exports.setPort = void 0;
const got_1 = __importDefault(require("got"));
const logger_1 = __importDefault(require("@wdio/logger"));
const log = (0, logger_1.default)('@wdio/shared-store-service');
const WAIT_INTERVAL = 100;
const pendingValues = new Map();
let waitTimeout;
let baseUrl;
const setPort = (port) => { baseUrl = `http://localhost:${port}`; };
exports.setPort = setPort;
/**
 * make a request to the server to get a value from the store
 * @param   {string} key
 * @returns {*}
 */
const getValue = async (key) => {
    const res = await got_1.default.post(`${baseUrl}/get`, { json: { key }, responseType: 'json' }).catch(errHandler);
    return (res && res.body) ? res.body.value : undefined;
};
exports.getValue = getValue;
/**
 * make a request to the server to set a value to the store
 * @param {string}  key
 * @param {*}       value `store[key]` value (plain object)
 */
const setValue = async (key, value) => {
    /**
     * if someone calls `setValue` in `onPrepare` we don't have a base url
     * set as the launcher is called after user hooks. In this case we need
     * to wait until it is set and flush all messages.
     */
    if (!baseUrl) {
        log.info('Shared store server not yet started, collecting value');
        pendingValues.set(key, value);
        if (!waitTimeout) {
            log.info('Check shared store server to start');
            waitTimeout = setInterval(async () => {
                if (!baseUrl) {
                    return;
                }
                log.info(`Shared store server started, flushing ${pendingValues.size} values`);
                clearInterval(waitTimeout);
                await Promise.all([...pendingValues.entries()].map(async ([key, value]) => {
                    await got_1.default.post(`${baseUrl}/set`, { json: { key, value } }).catch(errHandler);
                    pendingValues.delete(key);
                })).then(() => log.info('All pending values were successfully stored'), (err) => log.error(`Failed to store all values: ${err.stack}`));
            }, WAIT_INTERVAL);
        }
        return;
    }
    await got_1.default.post(`${baseUrl}/set`, { json: { key, value } }).catch(errHandler);
};
exports.setValue = setValue;
const errHandler = (err) => {
    log.warn(err.statusCode, err.statusMessage, err.url, err.body);
};
