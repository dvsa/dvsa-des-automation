import { AppiumContext } from '../models/appiumContext.model';

export abstract class BasePageObject {
  nativeContextTitle = 'NATIVE_APP';

  defaultTimeOut = 10000;

  async getContexts(): Promise<AppiumContext[]> {
    return await driver.getContexts() as unknown as AppiumContext[];
  }

  async doesContextExist(contextTitle: string): Promise<boolean> {
    const contexts: AppiumContext[] = await this.getContexts();
    const doesContextExist: boolean = contexts.some(
      (context) => (context.title === contextTitle || context.id === contextTitle),
    );
    return doesContextExist;
  }

  async waitForContextToExist(contextTitle: string): Promise<void> {
    await driver.waitUntil(async () => this.doesContextExist(contextTitle), {
      timeout: this.defaultTimeOut,
      timeoutMsg: `timed out waiting for ${contextTitle} context`,
    });
  }

  async waitForExist(element: WebdriverIO.Element): Promise<void> {
    const { selector } = element;
    await element.waitForExist({
      timeout: this.defaultTimeOut,
      // eslint-disable-next-line max-len
      timeoutMsg: `Element with selector: ${selector} did not exist on page within 15 seconds`,
    });
  }

  async waitForClickable(element: WebdriverIO.Element): Promise<void> {
    const { selector } = element;
    await element.waitForClickable({
      timeout: this.defaultTimeOut,
      // eslint-disable-next-line max-len
      timeoutMsg: `Element with selector: ${selector} was not clickable on page within 15 seconds`,
    });
  }

  async waitForExistAndClickable(element: WebdriverIO.Element): Promise<void> {
    await this.waitForExist(element);
    await this.waitForClickable(element);
  }

  async clickNativeButton(element: WebdriverIO.Element): Promise<void> {
    await this.waitForContextToExist(this.nativeContextTitle);
    await this.switchToNativeContext();
    await browser.pause(1500);
    await this.clickElement(element);
  }

  async getContextByTitle(title: string): Promise<AppiumContext | null> {
    const contexts = await this.getContexts();
    return (contexts.find((context) => context.title === title) || null);
  }

  async clickElement(element: WebdriverIO.Element) {
    await this.waitForExistAndClickable(element);
    await element.click();
  }

  async switchToNativeContext(): Promise<void> {
    await driver.switchContext(this.nativeContextTitle);
  }
}
